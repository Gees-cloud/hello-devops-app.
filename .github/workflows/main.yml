name: Deploy Node.js App to EC2

on:
  push:
    branches:
      - main # This workflow will run whenever you push changes to the 'main' branch

env:
  ECR_REPOSITORY: hello-node-app # Name of your Docker image repository in ECR (we'll create this soon)
  AWS_REGION: us-east-1 # Your AWS region where EC2 and ECR are (e.g., us-east-1, eu-west-1)
  EC2_INSTANCE_IP: 3.92.191.37
  SSH_USER: ec2-user # Default user for Amazon Linux AMIs

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # The type of runner that the job will run on

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # This action checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_INSTANCE_IP }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} # We'll add this secret soon!
          script: |
            # Stop and remove the old container if it's running or exists
      docker stop hello-node-app || true
      docker rm hello-node-app || true

      # Pull the latest Docker image
      docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      # Run the new container, mapping port 80 to 3000
      docker run -d -p 80:3000 --name hello-node-app ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            
            # Login to ECR on EC2
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            # Pull the new image
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            
            # Run the new container
            docker run -d -p 80:3000 --name hello-node-app ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            
            # Clean up old images (optional, but good practice)
            docker image prune -f
            
            echo "Deployment complete!"
